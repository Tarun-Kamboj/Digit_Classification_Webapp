{"version":3,"sources":["components/Draw.js","App.js","serviceWorker.js","index.js","../node_modules/jsdom/lib/jsdom sync","../node_modules/parse5/lib sync"],"names":["styles","draw","margin","doubleSize","fontSize","Draw","useState","setSend","result","setResult","sketch","useRef","sendData","c","fd","FormData","append","axios","post","headers","then","res","console","log","data","getImageResult","id","catch","err","get","Fragment","Alert","variant","style","ref","height","width","tool","Tools","Pencil","backgroundColor","lineColor","lineWidth","imageFormat","className","Button","onClick","canvas","current","toDataURL","clear","_backgroundColor","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message","webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports"],"mappings":"iOAMMA,EAAO,CACTC,KAAK,CACDC,OAAO,UAEXC,WAAW,CACPC,SAAS,SAuEFC,EAnEF,WAAO,IAAD,EACSC,oBAAS,GADlB,mBACFC,GADE,aAEaD,qBAFb,mBAERE,EAFQ,KAEAC,EAFA,KAGTC,EAASC,mBAeTC,EAAW,SAACC,GAEd,IAIMC,EAAK,IAAIC,SACfD,EAAGE,OAAO,QAASH,GAEnBI,IAAMC,KAAK,oCAAqCJ,EAAI,CAACK,QAPrC,CACZ,OAAU,sBAObC,MAAK,SAAAC,GACFC,QAAQC,IAAIF,EAAIG,MAChBjB,GAAQ,GACRkB,EAAeJ,EAAIG,KAAKE,OAE3BC,OAAM,SAAAC,GAAG,OAAEN,QAAQC,IAAIK,OAItBH,EAAiB,SAACC,GACpBT,IAAMY,IAAN,2CAA8CH,EAA9C,MACCN,MAAK,SAAAC,GACFZ,EAAUY,EAAIG,KAAKhB,YAI3B,OACI,kBAAC,IAAMsB,SAAP,KACKtB,GAAU,kBAACuB,EAAA,EAAD,CAAOC,QAAQ,UAAUC,MAAOjC,EAAOG,YAAaK,GAC/D,kBAAC,cAAD,CACI0B,IAAKxB,EACLyB,OAAO,QACPC,MAAM,QACNH,MAAOjC,EAAOC,KACdoC,KAAMC,QAAMC,OACZC,gBAAgB,QAChBC,UAAU,QACVC,UAAW,GACXC,YAAY,QAEhB,uBAAGC,UAAU,QAAb,mDACA,yBAAKA,UAAU,QACX,kBAACC,EAAA,EAAD,CAAQC,QAvDC,WACjB,IAAMC,EAASrC,EAAOsC,QAAQC,YAE9BrC,EAASmC,IAoD8Bf,QAAQ,UAAUY,UAAU,aAA3D,WACA,kBAACC,EAAA,EAAD,CAAQC,QAlDA,WAChBpC,EAAOsC,QAAQE,QACfxC,EAAOsC,QAAQG,iBAAiB,SAChC5C,GAAQ,GACRE,KA8CsCuB,QAAQ,YAAYY,UAAU,aAA5D,YC/DDQ,MATf,WACE,OACE,yBAAKR,UAAU,OACb,wBAAIA,UAAU,aAAd,yBACA,kBAAC,EAAD,CAAMA,UAAU,WCIFS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7C,MAAK,SAAA8C,GACJA,EAAaC,gBAEdxC,OAAM,SAAAyC,GACL9C,QAAQ8C,MAAMA,EAAMC,a,6cEzI5B,SAASC,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoB5C,GAAK,K,kBCRzB,SAAS4C,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoB5C,GAAK,M","file":"static/js/main.1340c9d1.chunk.js","sourcesContent":["import React, {useRef, useState} from 'react'\r\nimport {SketchField, Tools} from 'react-sketch'\r\nimport {Alert, Button} from 'react-bootstrap'\r\n// import {saveAs} from 'file-saver'\r\nimport axios from 'axios'\r\n\r\nconst styles={\r\n    draw:{\r\n        margin:'0 auto'\r\n    },\r\n    doubleSize:{\r\n        fontSize:'2rem'\r\n    }\r\n}\r\n\r\nconst Draw = () => {\r\n    const [send, setSend] = useState(false)\r\n    const [result, setResult] = useState()\r\n    const sketch = useRef()\r\n\r\n    const handleSubmit = () => {\r\n        const canvas = sketch.current.toDataURL()\r\n        // saveAs(canvas, 'digit.jpg')\r\n        sendData(canvas)\r\n    }\r\n\r\n    const handleReset = () => {\r\n        sketch.current.clear()\r\n        sketch.current._backgroundColor('black')\r\n        setSend(false)\r\n        setResult()\r\n    }\r\n\r\n    const sendData = (c) => {\r\n\r\n        const headers = {\r\n            'accept': 'application/json'\r\n        }\r\n\r\n        const fd = new FormData()\r\n        fd.append('image', c)\r\n\r\n        axios.post('http://127.0.0.1:8000/api/digits/', fd, {headers:headers})\r\n        .then(res=>{\r\n            console.log(res.data)\r\n            setSend(true)\r\n            getImageResult(res.data.id)\r\n        })\r\n        .catch(err=>console.log(err))\r\n\r\n    }\r\n\r\n    const getImageResult = (id) =>{\r\n        axios.get(`http://127.0.0.1:8000/api/digits/${id}/`)\r\n        .then(res=>{\r\n            setResult(res.data.result)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {result && <Alert variant=\"primary\" style={styles.doubleSize}>{result}</Alert>}\r\n            <SketchField\r\n                ref={sketch}\r\n                height='600px'\r\n                width='600px'\r\n                style={styles.draw}\r\n                tool={Tools.Pencil}\r\n                backgroundColor='black'\r\n                lineColor='white'\r\n                lineWidth={30}\r\n                imageFormat='jpg'\r\n            />\r\n            <p className=\"mt-1\">Note: please enter only single digit at a time.</p>\r\n            <div className=\"mt-3\">\r\n                <Button onClick={handleSubmit} variant=\"primary\" className=\"ml-1 mr-1\">Predict</Button>\r\n                <Button onClick={handleReset} variant=\"secondary\" className=\"ml-1 mr-1\">Reset</Button>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Draw;","import React from 'react';\nimport './App.css';\nimport Draw from './components/Draw';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"mt-2 mb-2\">Let's classify digits</h1>\n      <Draw className=\"mt-3\" />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 770;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 802;"],"sourceRoot":""}